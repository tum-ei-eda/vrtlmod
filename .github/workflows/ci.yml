name: CI

on:
  push:
    branches:
      - master
      - release
    tags:
      - v*
  pull_request:
    branches:
      - master
      - dev
      - release
env:
  BUILD_DIR: build
  INSTALL_DIR: installed

jobs:

  requirements:
    strategy:
      matrix:
        config:
          - {name: "Ubuntu-20.04-Release", os: ubuntu-20.04, python: "3.9", cmakegen: "Release", verilator: "v4.202", llvm: "linux-gnu-ubuntu-18.04", llvm-ext: "tar.xz", unpack: "tar xf"}

    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}_requirements

    steps:
    - uses: actions/cache@v3
      id: cache-llvm
      with:
        path: ${{runner.workspace}}/llvm
        key: ${{ matrix.config.name }}-llvm_${{ matrix.config.llvm }}
        restore-keys: |
          ${{ matrix.config.name }}-llvm_${{ matrix.config.llvm }}

    - uses: actions/cache@v3
      id: cache-verilator
      with:
        path: ${{runner.workspace}}/verilator
        key: ${{ matrix.config.name }}-verilator_${{ matrix.config.verilator }}
        restore-keys: |
          ${{ matrix.config.name }}-verilator_${{ matrix.config.verilator }}

    - name: Requirements (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install libboost-filesystem-dev cmake make perl g++ gdb libfl2 libfl-dev zlib1g zlib1g-dev ccache numactl perl-doc autoconf flex bison

    - if: ${{ steps.cache-llvm.outputs.cache-hit != 'true' }}
      name: Requirements LLVM+Clang
      working-directory: ${{runner.workspace}}
      shell: bash
      run: |
        LLVM_NAME="clang+llvm-13.0.1-x86_64-${{ matrix.config.llvm }}"
        LLVM_SOURCE="https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.1"
        wget -nv --show-progress ${LLVM_SOURCE}/${LLVM_NAME}.${{ matrix.config.llvm-ext }}
        ${{ matrix.config.unpack }} ${LLVM_NAME}.${{ matrix.config.llvm-ext }}
        mv ${LLVM_NAME} ${{runner.workspace}}/llvm

    - name: Check (cached) Clang
      continue-on-error: false
      shell: bash
      working-directory: ${{runner.workspace}}
      run: ${{runner.workspace}}/llvm/bin/clang --version

    - if: ${{ steps.cache-verilator.outputs.cache-hit != 'true' }}
      name: Requirements Verilator
      working-directory: ${{runner.workspace}}
      shell: bash
      run: |
        VERILATOR_SOURCE="https://github.com/verilator/verilator.git"
        git clone ${VERILATOR_SOURCE} ${{runner.workspace}}/verilator
        cd ${{runner.workspace}}/verilator
        git checkout ${{ matrix.config.verilator }}
        autoconf
        ./configure
        make -j $(nproc)

    - name: Check (cached) Verilator
      continue-on-error: false
      shell: bash
      working-directory: ${{runner.workspace}}
      run: ${{runner.workspace}}/verilator/bin/verilator --version

  build:
    strategy:
      matrix:
        config:
          - {name: "Ubuntu-20.04-Release", os: ubuntu-20.04, python: "3.9", cmakegen: "Release", verilator: "v4.202", llvm: "linux-gnu-ubuntu-18.04", llvm-ext: "tar.xz", unpack: "tar xf", conan: "1.59.0"}

    needs: requirements
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}_build

    steps:
    - uses: actions/checkout@v2

    - uses: actions/cache@v3
      id: cache-llvm
      with:
        path: ${{runner.workspace}}/llvm
        key: ${{ matrix.config.name }}-llvm_${{ matrix.config.llvm }}
        restore-keys: |
          ${{ matrix.config.name }}-llvm_${{ matrix.config.llvm }}

    - uses: actions/cache@v3
      id: cache-verilator
      with:
        path: ${{runner.workspace}}/verilator
        key: ${{ matrix.config.name }}-verilator_${{ matrix.config.verilator }}
        restore-keys: |
          ${{ matrix.config.name }}-verilator_${{ matrix.config.verilator }}

    - uses: actions/cache@v3
      id: cache-conan
      with:
        path: ${{runner.workspace}}/.conan
        key: ${{ matrix.config.name }}-conan_${{ matrix.config.conan }}
        restore-keys: |
          ${{ matrix.config.name }}-conan_${{ matrix.config.conan }}

    - name: Requirements (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install libboost-filesystem-dev cmake make perl g++ gdb libfl2 libfl-dev zlib1g zlib1g-dev ccache numactl perl-doc autoconf flex bison

    - name: Check (cached) Verilator
      continue-on-error: false
      shell: bash
      working-directory: ${{runner.workspace}}
      run: ${{runner.workspace}}/verilator/bin/verilator --version

    - name: Check (cached) Clang
      continue-on-error: false
      shell: bash
      working-directory: ${{runner.workspace}}
      run: ${{runner.workspace}}/llvm/bin/clang --version

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}
      run: |
        export VERILATOR_ROOT=${{runner.workspace}}/verilator
        export LLVM_DIR=${{runner.workspace}}/llvm
        cmake -S ${GITHUB_WORKSPACE} -B ${BUILD_DIR} -D CMAKE_BUILD_TYPE=${{ matrix.config.cmakegen }} -D CMAKE_INSTALL_PREFIX=${INSTALL_DIR}

    - name: Build
      working-directory: ${{runner.workspace}}
      shell: bash
      run: cmake --build ${BUILD_DIR} --config ${{ matrix.config.cmakegen }} --parallel $(nproc)

    - name: Install
      working-directory: ${{runner.workspace}}
      shell: bash
      run: cmake --install ${BUILD_DIR} --config ${{ matrix.config.cmakegen }}

    - name: (CTest) Requirements (Linux) Python+Conan
      if: runner.os == 'Linux'
      working-directory: ${{runner.workspace}}
      shell: bash
      run: |
        pip install --force-reinstall "conan==${{ matrix.config.conan }}"
        if [[ $(conan --version | grep 'version 2.') ]]
        then
            conan profile detect
        else
            conan user
            if ! [[ $(conan profile list) = *default* ]]
            then
              conan profile new default --detect
            fi
            conan profile update settings.compiler.libcxx=libstdc++11 default
        fi

    - name: (CTest) Configure Build Environment
      shell: bash
      working-directory: ${{runner.workspace}}
      run: |
        export VERILATOR_ROOT=${{runner.workspace}}/verilator
        export LLVM_DIR=${{runner.workspace}}/llvm
        cmake -S ${GITHUB_WORKSPACE} -B ${BUILD_DIR} -D CMAKE_BUILD_TYPE=${{ matrix.config.cmakegen }} -D CMAKE_INSTALL_PREFIX=${INSTALL_DIR} -D BUILD_TESTING=On

    - name: (CTest) Build Environment
      shell: bash
      working-directory: ${{runner.workspace}}
      run: |
        cmake --build ${BUILD_DIR} --config ${{ matrix.config.cmakegen }} --parallel $(nproc)
        cd ${BUILD_DIR}
        ctest -C ${{ matrix.config.cmakegen }} --parallel $(nproc) --rerun-failed --output-on-failure
        cat Testing/Temporary/LastTest.log
        cat Testing/Temporary/CTestCostData.txt

    - name: (CTest) Pack Test Artifacts on Failure
      if: ${{ failure() }}
      run: tar -C ${{runner.workspace}} -czvf ${{runner.workspace}}/vrtlmod-failed-test.tar.gz ${{runner.workspace}}/${BUILD_DIR}/Testing

    - name: (CTest) Upload Artifacts on Failure
      uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: vrtlmod-failed-test-${{matrix.config.name}}.tar.gz
        path: ${{runner.workspace}}/vrtlmod-failed-test.tar.gz
        if-no-files-found: error
        retention-days: 15

    - name: Compress Compiled System
      if: runner.os == 'Linux'
      run: tar -C ${{runner.workspace}} -czvf ${{runner.workspace}}/vrtlmod.tar.gz ${INSTALL_DIR}

    - name: Upload Compiled System
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v2
      with:
        name: vrtlmod-${{matrix.config.name}}.tar.gz
        path: ${{runner.workspace}}/vrtlmod.tar.gz

  benchmark:
    strategy:
      matrix:
        config:
          - {name: "Ubuntu-20.04-Release", os: ubuntu-20.04, python: "3.9", cmakegen: "Release", verilator: "v4.202", llvm: "linux-gnu-ubuntu-18.04", llvm-ext: "tar.xz", unpack: "tar xf", conan: "1.59.0"}
        duts: ["foo", "cv32e40p", "cv32e40s", "cva6"]

    needs: build
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}_benchmark_${{ matrix.duts }}

    steps:
    - uses: actions/checkout@v2

    - uses: actions/cache@v3
      id: cache-llvm
      with:
        path: ${{runner.workspace}}/llvm
        key: ${{ matrix.config.name }}-llvm_${{ matrix.config.llvm }}
        restore-keys: |
          ${{ matrix.config.name }}-llvm_${{ matrix.config.llvm }}

    - uses: actions/cache@v3
      id: cache-verilator
      with:
        path: ${{runner.workspace}}/verilator
        key: ${{ matrix.config.name }}-verilator_${{ matrix.config.verilator }}
        restore-keys: |
          ${{ matrix.config.name }}-verilator_${{ matrix.config.verilator }}

    - uses: actions/cache@v3
      id: cache-conan
      with:
        path: ${{runner.workspace}}/.conan
        key: ${{ matrix.config.name }}-conan_${{ matrix.config.conan }}
        restore-keys: |
          ${{ matrix.config.name }}-conan_${{ matrix.config.conan }}

    - name: Fetch Compiled System
      uses: actions/download-artifact@v2
      with:
        name: vrtlmod-${{matrix.config.name}}.tar.gz
        path: ${{runner.workspace}}

    - name: Unpack Compiled System
      working-directory: ${{runner.workspace}}
      run: tar -xf vrtlmod.tar.gz

    - name: Requirements (Linux)
      run: |
        sudo apt-get install libboost-filesystem-dev cmake make perl g++ gdb libfl2 libfl-dev zlib1g zlib1g-dev ccache numactl perl-doc autoconf flex bison

    - name: Check (cached) Verilator
      continue-on-error: false
      shell: bash
      working-directory: ${{runner.workspace}}
      run: ${{runner.workspace}}/verilator/bin/verilator --version

    - name: Check (cached) Clang
      continue-on-error: false
      shell: bash
      working-directory: ${{runner.workspace}}
      run: ${{runner.workspace}}/llvm/bin/clang --version

    - name: Requirements (Linux) Python+Conan
      working-directory: ${{runner.workspace}}
      shell: bash
      run: |
        pip install --force-reinstall "conan==${{ matrix.config.conan }}"
        if [[ $(conan --version | grep 'version 2.') ]]
        then
            conan profile detect
        else
            conan user
            if ! [[ $(conan profile list) = *default* ]]
            then
              conan profile new default --detect
            fi
            conan profile update settings.compiler.libcxx=libstdc++11 default
        fi

    - name: Configure Benchmarks
      shell: bash
      working-directory: ${{runner.workspace}}
      run: |
        export VERILATOR_ROOT=${{runner.workspace}}/verilator
        export LLVM_DIR=${{runner.workspace}}/llvm
        cmake -S ${GITHUB_WORKSPACE}/test/benchmark -B build-${{matrix.duts}} -D VP=${{matrix.duts}} -D CMAKE_BUILD_TYPE=${{ matrix.config.cmakegen }} -D VRTLMOD_ROOT=${{runner.workspace}}/installed

    - name: Compile Benchmarks
      shell: bash
      working-directory: ${{runner.workspace}}
      run: |
        cmake --build build-${{matrix.duts}} --parallel $(nproc)

    - name: Run Benchmarks
      shell: bash
      working-directory: ${{runner.workspace}}
      run: |
        build-${{matrix.duts}}/SC_TEST_VRTLMOD ${GITHUB_WORKSPACE}/test/benchmark/${{matrix.duts}}/dhry.elf 5 10 > ${{matrix.duts}}-log.txt
        cat ${{matrix.duts}}-log.txt

    - name: Save Benchmark Results
      uses: actions/upload-artifact@v2
      with:
        name: ${{matrix.duts}}-log.txt
        path: ${{runner.workspace}}/${{matrix.duts}}-log.txt
