name: CI

on:
  push:
    branches:
      - master
      - release
    tags:
      - v*
  pull_request:
    branches:
      - master
      - release
env:
  BUILD_DIR: build
  INSTALL_DIR: installed

jobs:
  build:
    strategy:
      matrix:
        config:
          - {name: "Ubuntu-Latest-Release", os: ubuntu-latest, python: "3.9", cmakegen: "Release", verilator: "v4.202", llvm: "linux-gnu-ubuntu-18.04", llvm-ext: "tar.xz", tc: "linux-ubuntu14", tc-ext: ".tar.gz", unpack: "tar xf"}

    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}_build

    steps:
    - uses: actions/checkout@v2

    - name: Requirements (Linux)
      if: matrix.config.name == 'Ubuntu-Latest-Release'
      run: |
        sudo apt-get install libboost-filesystem-dev cmake make perl g++ gdb libfl2 libfl-dev zlib1g zlib1g-dev ccache numactl perl-doc autoconf flex bison
        cmake --version

    - name: Requirements (Linux) LLVM+Clang
      if: matrix.config.name == 'Ubuntu-Latest-Release'
      working-directory: ${{runner.workspace}}
      shell: bash
      run: |
        LLVM_NAME="clang+llvm-13.0.1-x86_64-${{ matrix.config.llvm }}"
        LLVM_SOURCE="https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.1"
        wget -nv --show-progress ${LLVM_SOURCE}/${LLVM_NAME}.${{ matrix.config.llvm-ext }}
        ${{ matrix.config.unpack }} ${LLVM_NAME}.${{ matrix.config.llvm-ext }}
        mv ${LLVM_NAME} ${{runner.workspace}}/llvm

    - name: Requirements (Linux) Verilator
      if: matrix.config.name == 'Ubuntu-Latest-Release'
      working-directory: ${{runner.workspace}}
      shell: bash
      run: |
        VERILATOR_SOURCE="https://github.com/verilator/verilator.git"
        git clone ${VERILATOR_SOURCE} ${{runner.workspace}}/verilator
        cd ${{runner.workspace}}/verilator
        git checkout ${{ matrix.config.verilator }}
        autoconf
        ./configure
        make -j$(nproc)

    - name: Requirements (Linux) Python+Conan
      if: matrix.config.name == 'Ubuntu-Latest-Release'
      working-directory: ${{runner.workspace}}
      shell: bash
      run: |
        pip install conan
        conan user
        if ! [[ $(conan profile list) = *default* ]]
        then
          conan profile new default --detect
        fi
        conan profile update settings.compiler.libcxx=libstdc++11 default

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}
      run: |
        export VERILATOR_ROOT=${{runner.workspace}}/verilator
        export LLVM_DIR=${{runner.workspace}}/llvm
        cmake -S ${GITHUB_WORKSPACE} -B ${BUILD_DIR} -D CMAKE_BUILD_TYPE=${{ matrix.config.cmakegen }} -D CMAKE_INSTALL_PREFIX=${INSTALL_DIR}

    - name: Build
      working-directory: ${{runner.workspace}}
      shell: bash
      run: cmake --build ${BUILD_DIR} --config ${{ matrix.config.cmakegen }} --parallel $(nproc)

    - name: Install
      working-directory: ${{runner.workspace}}
      shell: bash
      run: cmake --install ${BUILD_DIR} --config ${{ matrix.config.cmakegen }}

    - name: (CTest) Configure Build Environment
      shell: bash
      working-directory: ${{runner.workspace}}
      run: |
        export VERILATOR_ROOT=${{runner.workspace}}/verilator
        export LLVM_DIR=${{runner.workspace}}/llvm
        cmake -S ${GITHUB_WORKSPACE} -B ${BUILD_DIR} -D CMAKE_BUILD_TYPE=${{ matrix.config.cmakegen }} -D CMAKE_INSTALL_PREFIX=${INSTALL_DIR} -D BUILD_TESTING=On

    - name: (CTest) Build Environment
      shell: bash
      working-directory: ${{runner.workspace}}
      run: |
        cmake --build ${BUILD_DIR} --config ${{ matrix.config.cmakegen }} --parallel $(nproc)
        cd ${BUILD_DIR}
        ctest -C ${{ matrix.config.cmakegen }} --parallel $(nproc) --rerun-failed --output-on-failure
        cat Testing/Temporary/LastTest.log
        cat Testing/Temporary/CTestCostData.txt

    - name: (CTest) Pack Test Artifacts on Failure
      if: ${{ failure() }}
      run: tar -C ${{runner.workspace}} -czvf ${{runner.workspace}}/vrtlmod-failed-test.tar.gz ${{runner.workspace}}/${BUILD_DIR}/Testing

    - name: (CTest) Upload Artifacts on Failure
      uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: vrtlmod-failed-test-${{matrix.config.name}}.tar.gz
        path: ${{runner.workspace}}/vrtlmod-failed-test.tar.gz
        if-no-files-found: error
        retention-days: 15

    - name: Compress Compiled System
      if: matrix.config.name == 'Ubuntu-Latest-Release'
      run: tar -C ${{runner.workspace}} -czvf ${{runner.workspace}}/vrtlmod.tar.gz ${INSTALL_DIR}

    - name: Upload Compiled System
      if: matrix.config.name == 'Ubuntu-Latest-Release'
      uses: actions/upload-artifact@v2
      with:
        name: vrtlmod-${{matrix.config.name}}.tar.gz
        path: ${{runner.workspace}}/vrtlmod.tar.gz
